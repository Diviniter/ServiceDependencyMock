//https://github.com/dotnet/core/issues/2000

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: 19/03/2019 01:03:46
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------
using ExternalDependency;
using Mock.Dependency.With.Proxy.Apply.Strategy;
using Mock.Dependency.With.Proxy.Data.Transfer.Objects.Strategies;
using System;
using Unity;
using static Integration.Tests.ProjectWithProxy.IOCContainer;
using static Integration.Tests.ProjectWithProxy.ServiceMethodsStrategies.ServiceMethodsIdentifiers;

namespace Integration.Tests.ProjectWithProxy
{
	public class ExternalServiceProxyBase 
	{
		protected virtual Func<MockStrategy, bool> InWantedContext()
        {
            return s => { return true; };
        }
	}

		public interface ExternalServiceGetTemplate
	{
		int Get();
	}
			
	public partial class ExternalServiceProxy : ExternalServiceProxyBase, ExternalService
    {
        private readonly ExternalService service;
        private readonly MockStrategyRepository mockStrategyQuery;

        public ExternalServiceProxy(MockStrategyRepository mockStrategyQuery, ExternalService service)
        {
            this.mockStrategyQuery = mockStrategyQuery;
            this.service = service;
        }


		public int Get()
        {
           int returnedValue;

            var mockStrategy = this.mockStrategyQuery.GetMockStrategy(GetId, this.InWantedContext());

            if (NoMockStrategy(mockStrategy))
            {
                returnedValue = this.service.Get();
            }
            else if (mockStrategy is ObjectStrategy<int> objectStrategy)
            {
                returnedValue = objectStrategy.MockedObject;
            }
            else if (mockStrategy is SubstituteBehaviorStrategy methodStrategy)
            {
                returnedValue = ApplyMethodMockStrategyGet(methodStrategy);
            }
            else
            {
                throw new Exception("Current mock strategy is not take in account");
            }

            this.mockStrategyQuery.RemoveStrategy(mockStrategy);

            return returnedValue;
        }

		private static int ApplyMethodMockStrategyGet(SubstituteBehaviorStrategy substituteBehaviorStrategy)
        {
            try
            {
                var serviceSubstitute = Container.Resolve<ExternalServiceGetTemplate>(substituteBehaviorStrategy.BehaviorName);
                return serviceSubstitute.Get();
            }
            catch (ResolutionFailedException)
            {
                throw new Exception($"Method strategy '{substituteBehaviorStrategy.BehaviorName}' is not defined");
            }
        }
		
		private static bool NoMockStrategy(MockStrategy mockStrategy)
        {
            return mockStrategy is NoMockStrategy || mockStrategy is ForceNoMockStrategy;
        }
	}
}
    

